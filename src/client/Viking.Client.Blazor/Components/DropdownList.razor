@typeparam TItem
@typeparam TValue

<select @attributes="Attributes" class="form-control" @bind="@Value">
    @if (items.Count() > 0)
    {
        <option selected>@DefaultText</option>
    }

    @foreach (var item in items)
    {
        var display = DisplayPath.Invoke(item);
        var value = ValuePath.Invoke(item);

        <option value="@value">@display</option>
    }
</select>
@code {
    [Parameter(CaptureUnmatchedValues = true)] public Dictionary<string, object> Attributes { get; set; }
    [Parameter] public string DefaultText { get; set; } = "Choose...";
    [Parameter] public Func<TItem, string> DisplayPath { get; set; }
    [Parameter] public Func<TItem, TValue> ValuePath { get; set; }
    [Parameter] public Func<IEnumerable<TItem>> ItemSource { get; set; }
    [Parameter] public EventCallback<TValue> SelectionChanged { get; set; }
    [Parameter] public TValue Value { get; set; }

    private IEnumerable<TItem> items;

    protected override void OnInitialized()
    {
        items = ItemSource?.Invoke() ?? new List<TItem>();
    }

    private void Dropdown_SelectionChanged(ChangeEventArgs e)
    {
        if (e.Value is TValue tVal)
        {
            SelectionChanged.InvokeAsync(tVal);
        }
    }
}
